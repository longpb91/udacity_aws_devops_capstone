version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0

jobs:
  test_lint:
    docker:
      - image: python:3.7.3-stretch
    
    steps:
      - checkout
      - restore_cache:
          name: Load dependencies
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # Find the most recently generated cache used from any branch
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          name: Save dependencies
          paths: 
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint

  build-image:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Buil an Docker Image
          command: |
            docker build -t longpb/capstone_aws_devops_pj .
            echo "--- List of images ---"
            docker image ls
            echo "----------------------"
      - run:
          name: Push to DockerHub
          command: |
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker push longpb/capstone_aws_devops_pj
  
  # deploy-kubernetes:
  #   executor: aws-cli/default
  #   docker:
  #     - image: python:3.7.3-stretch
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "1a:a6:ca:a4:71:a4:de:d3:59:71:e9:d2:1c:ec:52:11"
  #     - run:
  #         name: Deploy kubernetes on EC2 instance
  #         command: |
  #           pwd
  #           echo "$EC2_KEYPAIR" >> capstone-keypair.pem
  #           ls -l
  #           chmod 400 capstone-keypair.pem
  #           apt update
  #           apt install expect -y
  #           chmod +x deploy_kubernetes.sh
  #           ./deploy_kubernetes.sh
  deploy-eks:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Install tar
            command: |
              yum -y install tar gzip gettext
        - run: 
            name: Install dependencies
            command: |
              curl -o /tmp/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl &&\
              chmod +x /tmp/kubectl
              mv /tmp/kubectl /usr/local/bin
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              mv /tmp/eksctl /usr/local/bin
        - run:
            name: Create cluster
            command: |
              chmod +x create_cluster.sh && \
              ./create_cluster.sh
        - run:
            name: Deploy Kubenetes to eks
            command: |
              chmod +x deploy_k8s.sh && \
              ./deploy_k8s.sh
              # Wait for deploy success 
              kubectl wait  --for=condition=ready pod -l app=myflaskapp
              sleep 30s
        - run:
            name: Test flask app is deployed 
            command: |
              export hostname=$(kubectl get services flask-service  -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
              export url="http://${hostname}:8000"
              if curl -X GET ${url} | grep -q "I am LongPB"
              then
                echo "App work at ${url}"
              else
                kubectl rollout undo deployment/myflaskapp-deployment
                kubectl rollout status deployment myflaskapp-deployment --timeout=90s
                echo "App didn't work after deploy. Rollback previous deploy.Check result at ${url}"
              fi
        
workflows:
  default:
    jobs:
      - test_lint
      - build-image:
          requires:
            - test_lint
      - deploy-eks:
          requires:
            - build-image

